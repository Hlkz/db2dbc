using System;

using System.Runtime.InteropServices;

namespace DBtoDBC
{
    public struct SpellBody
    {
        public SpellRecordMap[] records;
    };

    public struct SpellRecordMap
    {
        public SpellRecord record;
        public string[] spellName;
        public string[] spellRank;
        public string[] spellDesc;
        public string[] spellTool;
    };

    public struct SpellRecord
    {
        public UInt32 Id;
        public UInt32 Category;
        public UInt32 Dispel;
        public UInt32 Mechanic;
        public UInt32 Attributes;
        public UInt32 AttributesEx;
        public UInt32 AttributesEx2;
        public UInt32 AttributesEx3;
        public UInt32 AttributesEx4;
        public UInt32 AttributesEx5;
        public UInt32 AttributesEx6;
        public UInt32 AttributesEx7;
        public UInt32 Stances;
        public UInt32 unk_320_2;
        public UInt32 StancesNot;
        public UInt32 unk_320_3;
        public UInt32 Targets;
        public UInt32 TargetCreatureType;
        public UInt32 RequiresSpellFocus;
        public UInt32 FacingCasterFlags;
        public UInt32 CasterAuraState;
        public UInt32 TargetAuraState;
        public UInt32 CasterAuraStateNot;
        public UInt32 TargetAuraStateNot;
        public UInt32 casterAuraSpell;
        public UInt32 targetAuraSpell;
        public UInt32 excludeCasterAuraSpell;
        public UInt32 excludeTargetAuraSpell;
        public UInt32 CastingTimeIndex;
        public UInt32 RecoveryTime;
        public UInt32 CategoryRecoveryTime;
        public UInt32 InterruptFlags;
        public UInt32 AuraInterruptFlags;
        public UInt32 ChannelInterruptFlags;
        public UInt32 procFlags;
        public UInt32 procChance;
        public UInt32 procCharges;
        public UInt32 maxLevel;
        public UInt32 baseLevel;
        public UInt32 spellLevel;
        public UInt32 DurationIndex;
        public UInt32 powerType;
        public UInt32 manaCost;
        public UInt32 manaCostPerlevel;
        public UInt32 manaPerSecond;
        public UInt32 manaPerSecondPerLevel;
        public UInt32 rangeIndex;
        public float speed;
        public UInt32 modalNextSpell;
        public UInt32 StackAmount;
        public UInt32 Totem1;
        public UInt32 Totem2;
        public Int32 Reagent1;
        public Int32 Reagent2;
        public Int32 Reagent3;
        public Int32 Reagent4;
        public Int32 Reagent5;
        public Int32 Reagent6;
        public Int32 Reagent7;
        public Int32 Reagent8;
        public UInt32 ReagentCount1;
        public UInt32 ReagentCount2;
        public UInt32 ReagentCount3;
        public UInt32 ReagentCount4;
        public UInt32 ReagentCount5;
        public UInt32 ReagentCount6;
        public UInt32 ReagentCount7;
        public UInt32 ReagentCount8;
        public Int32 EquippedItemClass;
        public Int32 EquippedItemSubClassMask;
        public Int32 EquippedItemInventoryTypeMask;
        public UInt32 Effect1;                  public UInt32 Effect2;                  public UInt32 Effect3;
        public Int32 EffectDieSides1;           public Int32 EffectDieSides2;           public Int32 EffectDieSides3;
        public float EffectRealPointsPerLevel1; public float EffectRealPointsPerLevel2; public float EffectRealPointsPerLevel3;
        public Int32 EffectBasePoints1;         public Int32 EffectBasePoints2;         public Int32 EffectBasePoints3;
        public UInt32 EffectMechanic1;          public UInt32 EffectMechanic2;          public UInt32 EffectMechanic3;
        public UInt32 EffectImplicitTargetA1;   public UInt32 EffectImplicitTargetA2;   public UInt32 EffectImplicitTargetA3;
        public UInt32 EffectImplicitTargetB1;   public UInt32 EffectImplicitTargetB2;   public UInt32 EffectImplicitTargetB3;
        public UInt32 EffectRadiusIndex1;       public UInt32 EffectRadiusIndex2;       public UInt32 EffectRadiusIndex3;
        public UInt32 EffectApplyAuraName1;     public UInt32 EffectApplyAuraName2;     public UInt32 EffectApplyAuraName3;
        public UInt32 EffectAmplitude1;         public UInt32 EffectAmplitude2;         public UInt32 EffectAmplitude3;
        public float EffectValueMultiplier1;    public float EffectValueMultiplier2;    public float EffectValueMultiplier3; 	
        public UInt32 EffectChainTarget1;       public UInt32 EffectChainTarget2;       public UInt32 EffectChainTarget3;
        public UInt32 EffectItemType1;          public UInt32 EffectItemType2;          public UInt32 EffectItemType3;
        public Int32 EffectMiscValue1;          public Int32 EffectMiscValue2;          public Int32 EffectMiscValue3;
        public Int32 EffectMiscValueB1;         public Int32 EffectMiscValueB2;         public Int32 EffectMiscValueB3;
        public UInt32 EffectTriggerSpell1;      public UInt32 EffectTriggerSpell2;      public UInt32 EffectTriggerSpell3;
        public float EffectPointsPerComboPoint1;public float EffectPointsPerComboPoint2;public float EffectPointsPerComboPoint3;
        public UInt32 EffectSpellClassMaskA1;   public UInt32 EffectSpellClassMaskA2;   public UInt32 EffectSpellClassMaskA3;
        public UInt32 EffectSpellClassMaskB1;   public UInt32 EffectSpellClassMaskB2;   public UInt32 EffectSpellClassMaskB3;			
        public UInt32 EffectSpellClassMaskC1;   public UInt32 EffectSpellClassMaskC2;   public UInt32 EffectSpellClassMaskC3;
        public UInt32 SpellVisual1;
        public UInt32 SpellVisual2;
        public UInt32 SpellIconID;
        public UInt32 activeIconID;
        public UInt32 spellPriority;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 9)]    public UInt32[] SpellName;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 8)]    public UInt32[] SpellNameFlags;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 9)]    public UInt32[] Rank;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 8)]    public UInt32[] RankFlags;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 9)]    public UInt32[] Description;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 8)]    public UInt32[] DescriptionFlags;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 9)]    public UInt32[] ToolTip;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 8)]    public UInt32[] ToolTipFlags;
        public UInt32 ManaCostPercentage;
        public UInt32 StartRecoveryCategory;
        public UInt32 StartRecoveryTime;
        public UInt32 MaxTargetLevel;
        public UInt32 SpellFamilyName;
        public UInt32 SpellFamilyFlagsLow;
        public UInt32 SpellFamilyFlagsHigh;
        public UInt32 SpellFamilyFlags2;
        public UInt32 MaxAffectedTargets;
        public UInt32 DmgClass;
        public UInt32 PreventionType;
        public UInt32 StanceBarOrder;
        public float EffectDamageMultiplier1;   public float EffectDamageMultiplier2;   public float EffectDamageMultiplier3;
        public UInt32 MinFactionId;
        public UInt32 MinReputation;
        public UInt32 RequiredAuraVision;
        public UInt32 TotemCategory1;
        public UInt32 TotemCategory2;
        public Int32 AreaGroupId;
        public UInt32 SchoolMask;
        public UInt32 runeCostID;
        public UInt32 spellMissileID;
        public UInt32 PowerDisplayId;
        public float EffectBonusMultiplier1;    public float EffectBonusMultiplier2;    public float EffectBonusMultiplier3;
        public UInt32 spellDescriptionVariableID;
        public UInt32 SpellDifficultyId;
    };
}
